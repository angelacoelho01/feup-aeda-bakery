___PADARIA BAKER___

Produtos da loja:
-> pão
-> bolos (para aniversário)

Funcionalidades do sistema informático:
->realizar encomendas e depois levantá-las na loja onde querem (30 min depois)

Tipos de cliente:
->premium:
	- acumulam 10 pontos/euro
	- aos 100 pontos -> desconto de 5%; reset dos pontos
->normal:
	- acumulam 10 pontos/euro
	- aos 200 pontos -> desconto de 2%; reset dos pontos

__Implementação__:

Classe Cliente:
->atributos:
	- NIF
	- opinião da padaria (positiva ou negativa - média das avaliações de cada encomenda, 0..5)
	//- fatura (lista de produtos, quantidades, preço total a pagar)
	- avaliação (após a receber a encomenda) de 0 a 5 - se o cliente efetuar mais que uma encomenda a sua avalição é a média das suas avaliações
	- pontos
	- tipo do cliente(normal ou premium)

Classe Produto:
-> atributos:
	- nome
	- categoria
	- preço
Subclasse Pão:
-> atributos:
	- tipo de pão (pequeno ou grande)
Subclasse Bolo:
->atributo:
	- camadas do bolo (crocante, massa folhada, massa de pão de ló, com molho de carne)

Classe Funcionário:
-> atributo:
	- nome
	- NIF
	- salário
	- vector<Encomenda> (equilibrar entre funcionários...) (ou funcionario na encomenda, ou só na loja...?)
	
Classe Encomenda:
-> atributos:
    - pair(product,quantity)
    - preço
    
    
Classe Loja:
-> ordenar encomendas, ver estatísticas, etc
-> diferenciar utilizador (funcionário ou cliente) -> classe Loja; permitir ao funionário editar a "ementa"
vetor de tuples(cliente, numero de encomendas, avaliação) 
__TAREFAS__:

-> implementar as classes e respetivos métodos mais básicos (até 25 de outubro ou mais cedo)
-> desenvolver menus para o utilizador conseguir aceder ao menu: (até 6 de novembro)
	-pesquisar cliente (por nif, e nome?)
	-pesquisar por funcionário (por nome e nif)
	-pesquisar por produto(nome, categoria, por preços?)
	-saber as estatísticas de da sua loja (número de clientes de cada tipo, registo de pontos e descontos, história do cliente)
-> documentar projeto: (até 12 de novembro)



